
// Autogenerated file. Do not edit!!!

DisplayXMLhardcodingError(NUM_CONCEPT_TYPES == (ConceptTypes)GC.getNumConceptInfos(), "NUM_CONCEPT_TYPES", false);
DisplayXMLhardcodingError(strcmp("DOMAIN_SEA", GC.getDomainInfo(DOMAIN_SEA).getType()) == 0, "DOMAIN_SEA", true);
DisplayXMLhardcodingError(strcmp("DOMAIN_LAND", GC.getDomainInfo(DOMAIN_LAND).getType()) == 0, "DOMAIN_LAND", true);
DisplayXMLhardcodingError(strcmp("DOMAIN_IMMOBILE", GC.getDomainInfo(DOMAIN_IMMOBILE).getType()) == 0, "DOMAIN_IMMOBILE", true);
DisplayXMLhardcodingError(NUM_DOMAIN_TYPES == (DomainTypes)m_paDomainInfo.size(), "NUM_DOMAIN_TYPES", true);
DisplayXMLhardcodingError(NUM_FATHERCATEGORY_TYPES == (FatherCategoryTypes)GC.getNumFatherCategoryInfos(), "NUM_FATHERCATEGORY_TYPES", false);
DisplayXMLhardcodingError(strcmp("INVISIBLE_RANGER", GC.getInvisibleInfo(INVISIBLE_RANGER).getType()) == 0, "INVISIBLE_RANGER", true);
DisplayXMLhardcodingError(NUM_INVISIBLE_TYPES == (InvisibleTypes)GC.getNumInvisibleInfos(), "NUM_INVISIBLE_TYPES", true);
DisplayXMLhardcodingError(strcmp("UNITAI_UNKNOWN", GC.getUnitAIInfo(UNITAI_UNKNOWN).getType()) == 0, "UNITAI_UNKNOWN", true);
DisplayXMLhardcodingError(strcmp("UNITAI_ANIMAL", GC.getUnitAIInfo(UNITAI_ANIMAL).getType()) == 0, "UNITAI_ANIMAL", true);
DisplayXMLhardcodingError(strcmp("UNITAI_ANIMAL_SEA", GC.getUnitAIInfo(UNITAI_ANIMAL_SEA).getType()) == 0, "UNITAI_ANIMAL_SEA", true);
DisplayXMLhardcodingError(strcmp("UNITAI_FLEEING", GC.getUnitAIInfo(UNITAI_FLEEING).getType()) == 0, "UNITAI_FLEEING", true);
DisplayXMLhardcodingError(strcmp("UNITAI_COLONIST", GC.getUnitAIInfo(UNITAI_COLONIST).getType()) == 0, "UNITAI_COLONIST", true);
DisplayXMLhardcodingError(strcmp("UNITAI_SETTLER", GC.getUnitAIInfo(UNITAI_SETTLER).getType()) == 0, "UNITAI_SETTLER", true);
DisplayXMLhardcodingError(strcmp("UNITAI_WORKER", GC.getUnitAIInfo(UNITAI_WORKER).getType()) == 0, "UNITAI_WORKER", true);
DisplayXMLhardcodingError(strcmp("UNITAI_MISSIONARY", GC.getUnitAIInfo(UNITAI_MISSIONARY).getType()) == 0, "UNITAI_MISSIONARY", true);
DisplayXMLhardcodingError(strcmp("UNITAI_TRADER", GC.getUnitAIInfo(UNITAI_TRADER).getType()) == 0, "UNITAI_TRADER", true);
DisplayXMLhardcodingError(strcmp("UNITAI_SCOUT", GC.getUnitAIInfo(UNITAI_SCOUT).getType()) == 0, "UNITAI_SCOUT", true);
DisplayXMLhardcodingError(strcmp("UNITAI_WAGON", GC.getUnitAIInfo(UNITAI_WAGON).getType()) == 0, "UNITAI_WAGON", true);
DisplayXMLhardcodingError(strcmp("UNITAI_TREASURE", GC.getUnitAIInfo(UNITAI_TREASURE).getType()) == 0, "UNITAI_TREASURE", true);
DisplayXMLhardcodingError(strcmp("UNITAI_YIELD", GC.getUnitAIInfo(UNITAI_YIELD).getType()) == 0, "UNITAI_YIELD", true);
DisplayXMLhardcodingError(strcmp("UNITAI_GENERAL", GC.getUnitAIInfo(UNITAI_GENERAL).getType()) == 0, "UNITAI_GENERAL", true);
DisplayXMLhardcodingError(strcmp("UNITAI_DEFENSIVE", GC.getUnitAIInfo(UNITAI_DEFENSIVE).getType()) == 0, "UNITAI_DEFENSIVE", true);
DisplayXMLhardcodingError(strcmp("UNITAI_OFFENSIVE", GC.getUnitAIInfo(UNITAI_OFFENSIVE).getType()) == 0, "UNITAI_OFFENSIVE", true);
DisplayXMLhardcodingError(strcmp("UNITAI_COUNTER", GC.getUnitAIInfo(UNITAI_COUNTER).getType()) == 0, "UNITAI_COUNTER", true);
DisplayXMLhardcodingError(strcmp("UNITAI_WORKER_SEA", GC.getUnitAIInfo(UNITAI_WORKER_SEA).getType()) == 0, "UNITAI_WORKER_SEA", true);
DisplayXMLhardcodingError(strcmp("UNITAI_TRANSPORT_SEA", GC.getUnitAIInfo(UNITAI_TRANSPORT_SEA).getType()) == 0, "UNITAI_TRANSPORT_SEA", true);
DisplayXMLhardcodingError(strcmp("UNITAI_ASSAULT_SEA", GC.getUnitAIInfo(UNITAI_ASSAULT_SEA).getType()) == 0, "UNITAI_ASSAULT_SEA", true);
DisplayXMLhardcodingError(strcmp("UNITAI_COMBAT_SEA", GC.getUnitAIInfo(UNITAI_COMBAT_SEA).getType()) == 0, "UNITAI_COMBAT_SEA", true);
DisplayXMLhardcodingError(strcmp("UNITAI_PIRATE_SEA", GC.getUnitAIInfo(UNITAI_PIRATE_SEA).getType()) == 0, "UNITAI_PIRATE_SEA", true);
DisplayXMLhardcodingError(strcmp("UNITAI_ESCORT_SEA", GC.getUnitAIInfo(UNITAI_ESCORT_SEA).getType()) == 0, "UNITAI_ESCORT_SEA", true);
DisplayXMLhardcodingError(strcmp("UNITAI_TRANSPORT_COAST", GC.getUnitAIInfo(UNITAI_TRANSPORT_COAST).getType()) == 0, "UNITAI_TRANSPORT_COAST", true);
DisplayXMLhardcodingError(NUM_UNITAI_TYPES == (UnitAITypes)m_paUnitAIInfos.size(), "NUM_UNITAI_TYPES", true);
DisplayXMLhardcodingError(NUM_UNITCOMBAT_TYPES == (UnitCombatTypes)GC.getNumUnitCombatInfos(), "NUM_UNITCOMBAT_TYPES", false);
DisplayXMLhardcodingError(NUM_BUILDINGCLASS_TYPES == (BuildingClassTypes)GC.getNumBuildingClassInfos(), "NUM_BUILDINGCLASS_TYPES", false);
DisplayXMLhardcodingError(NUM_BUILDING_TYPES == (BuildingTypes)GC.getNumBuildingInfos(), "NUM_BUILDING_TYPES", false);
DisplayXMLhardcodingError(NUM_SPECIALBUILDING_TYPES == (SpecialBuildingTypes)GC.getNumSpecialBuildingInfos(), "NUM_SPECIALBUILDING_TYPES", false);
DisplayXMLhardcodingError(NUM_CIV_EFFECT_TYPES == (CivEffectTypes)m_paCivEffectInfo.size(), "NUM_CIV_EFFECT_TYPES", false);
DisplayXMLhardcodingError(NUM_ALARM_TYPES == (AlarmTypes)GC.getNumAlarmInfos(), "NUM_ALARM_TYPES", false);
DisplayXMLhardcodingError(NUM_CIVILIZATION_TYPES == (CivilizationTypes)GC.getNumCivilizationInfos(), "NUM_CIVILIZATION_TYPES", false);
DisplayXMLhardcodingError(NUM_LEADER_TYPES == (LeaderHeadTypes)GC.getNumLeaderHeadInfos(), "NUM_LEADER_TYPES", false);
DisplayXMLhardcodingError(NUM_TRAIT_TYPES == (TraitTypes)GC.getNumTraitInfos(), "NUM_TRAIT_TYPES", false);
DisplayXMLhardcodingError(NUM_UNIT_ARTSTYLE_TYPES == (UnitArtStyleTypes)GC.getNumUnitArtStyleTypeInfos(), "NUM_UNIT_ARTSTYLE_TYPES", false);
DisplayXMLhardcodingError(NUM_ACHIEVE_TYPES == (AchieveTypes)GC.getNumAchieveInfos(), "NUM_ACHIEVE_TYPES", false);
DisplayXMLhardcodingError(NUM_EVENT_TYPES == (EventTypes)GC.getNumEventInfos(), "NUM_EVENT_TYPES", false);
DisplayXMLhardcodingError(NUM_EVENTTRIGGER_TYPES == (EventTriggerTypes)GC.getNumEventTriggerInfos(), "NUM_EVENTTRIGGER_TYPES", false);
DisplayXMLhardcodingError(NUM_CIVIC_TYPES == (CivicTypes)GC.getNumCivicInfos(), "NUM_CIVIC_TYPES", false);
DisplayXMLhardcodingError(NUM_CIVICOPTION_TYPES == (CivicOptionTypes)GC.getNumCivicOptionInfos(), "NUM_CIVICOPTION_TYPES", false);
DisplayXMLhardcodingError(NUM_CLIMATE_TYPES == (ClimateTypes)GC.getNumClimateInfos(), "NUM_CLIMATE_TYPES", false);
DisplayXMLhardcodingError(NUM_CULTURELEVEL_TYPES == (CultureLevelTypes)GC.getNumCultureLevelInfos(), "NUM_CULTURELEVEL_TYPES", false);
DisplayXMLhardcodingError(NUM_DIPLOMACY_TYPES == (DiplomacyTypes)GC.getNumDiplomacyInfos(), "NUM_DIPLOMACY_TYPES", false);
DisplayXMLhardcodingError(NUM_EMPHASIZE_TYPES == (EmphasizeTypes)GC.getNumEmphasizeInfos(), "NUM_EMPHASIZE_TYPES", false);
DisplayXMLhardcodingError(NUM_ERA_TYPES == (EraTypes)GC.getNumEraInfos(), "NUM_ERA_TYPES", false);
DisplayXMLhardcodingError(NUM_EUROPE_TYPES == (EuropeTypes)GC.getNumEuropeInfos(), "NUM_EUROPE_TYPES", false);
DisplayXMLhardcodingError(NUM_FATHER_TYPES == (FatherTypes)GC.getNumFatherInfos(), "NUM_FATHER_TYPES", false);
DisplayXMLhardcodingError(NUM_FATHER_POINT_TYPES == (FatherPointTypes)GC.getNumFatherPointInfos(), "NUM_FATHER_POINT_TYPES", false);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_ADVANCED_START", GC.getGameOptionInfo(GAMEOPTION_ADVANCED_START).getType()) == 0, "GAMEOPTION_ADVANCED_START", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_NO_CITY_RAZING", GC.getGameOptionInfo(GAMEOPTION_NO_CITY_RAZING).getType()) == 0, "GAMEOPTION_NO_CITY_RAZING", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_AGGRESSIVE_AI", GC.getGameOptionInfo(GAMEOPTION_AGGRESSIVE_AI).getType()) == 0, "GAMEOPTION_AGGRESSIVE_AI", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_LEAD_ANY_CIV", GC.getGameOptionInfo(GAMEOPTION_LEAD_ANY_CIV).getType()) == 0, "GAMEOPTION_LEAD_ANY_CIV", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_PERMANENT_ALLIANCES", GC.getGameOptionInfo(GAMEOPTION_PERMANENT_ALLIANCES).getType()) == 0, "GAMEOPTION_PERMANENT_ALLIANCES", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_ALWAYS_WAR", GC.getGameOptionInfo(GAMEOPTION_ALWAYS_WAR).getType()) == 0, "GAMEOPTION_ALWAYS_WAR", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_ALWAYS_PEACE", GC.getGameOptionInfo(GAMEOPTION_ALWAYS_PEACE).getType()) == 0, "GAMEOPTION_ALWAYS_PEACE", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_ONE_CITY_CHALLENGE", GC.getGameOptionInfo(GAMEOPTION_ONE_CITY_CHALLENGE).getType()) == 0, "GAMEOPTION_ONE_CITY_CHALLENGE", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_NO_CHANGING_WAR_PEACE", GC.getGameOptionInfo(GAMEOPTION_NO_CHANGING_WAR_PEACE).getType()) == 0, "GAMEOPTION_NO_CHANGING_WAR_PEACE", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_NEW_RANDOM_SEED", GC.getGameOptionInfo(GAMEOPTION_NEW_RANDOM_SEED).getType()) == 0, "GAMEOPTION_NEW_RANDOM_SEED", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_LOCK_MODS", GC.getGameOptionInfo(GAMEOPTION_LOCK_MODS).getType()) == 0, "GAMEOPTION_LOCK_MODS", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_NO_GOODY_HUTS", GC.getGameOptionInfo(GAMEOPTION_NO_GOODY_HUTS).getType()) == 0, "GAMEOPTION_NO_GOODY_HUTS", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_NO_EVENTS", GC.getGameOptionInfo(GAMEOPTION_NO_EVENTS).getType()) == 0, "GAMEOPTION_NO_EVENTS", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_REDUCED_REF", GC.getGameOptionInfo(GAMEOPTION_REDUCED_REF).getType()) == 0, "GAMEOPTION_REDUCED_REF", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_RANDOM_SETTLEMENT_AREAS", GC.getGameOptionInfo(GAMEOPTION_RANDOM_SETTLEMENT_AREAS).getType()) == 0, "GAMEOPTION_RANDOM_SETTLEMENT_AREAS", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_USE_OLD_FOUNDING_FATHER_SYSTEM", GC.getGameOptionInfo(GAMEOPTION_USE_OLD_FOUNDING_FATHER_SYSTEM).getType()) == 0, "GAMEOPTION_USE_OLD_FOUNDING_FATHER_SYSTEM", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_NO_MORE_VARIABLES_HIDDEN", GC.getGameOptionInfo(GAMEOPTION_NO_MORE_VARIABLES_HIDDEN).getType()) == 0, "GAMEOPTION_NO_MORE_VARIABLES_HIDDEN", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_NO_WILD_LAND_ANIMALS", GC.getGameOptionInfo(GAMEOPTION_NO_WILD_LAND_ANIMALS).getType()) == 0, "GAMEOPTION_NO_WILD_LAND_ANIMALS", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_NO_WILD_SEA_ANIMALS", GC.getGameOptionInfo(GAMEOPTION_NO_WILD_SEA_ANIMALS).getType()) == 0, "GAMEOPTION_NO_WILD_SEA_ANIMALS", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_REDUCED_CITY_DISTANCE", GC.getGameOptionInfo(GAMEOPTION_REDUCED_CITY_DISTANCE).getType()) == 0, "GAMEOPTION_REDUCED_CITY_DISTANCE", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_ONLY_ONE_COLONIST_PER_VILLAGE", GC.getGameOptionInfo(GAMEOPTION_ONLY_ONE_COLONIST_PER_VILLAGE).getType()) == 0, "GAMEOPTION_ONLY_ONE_COLONIST_PER_VILLAGE", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_REMOVE_WORLD_BUILDER", GC.getGameOptionInfo(GAMEOPTION_REMOVE_WORLD_BUILDER).getType()) == 0, "GAMEOPTION_REMOVE_WORLD_BUILDER", true);
DisplayXMLhardcodingError(strcmp("GAMEOPTION_TRIANGLE_TRADE", GC.getGameOptionInfo(GAMEOPTION_TRIANGLE_TRADE).getType()) == 0, "GAMEOPTION_TRIANGLE_TRADE", true);
DisplayXMLhardcodingError(NUM_GAMEOPTION_TYPES == (GameOptionTypes)GC.getNumGameOptionInfos(), "NUM_GAMEOPTION_TYPES", true);
DisplayXMLhardcodingError(NUM_GAMESPEED_TYPES == (GameSpeedTypes)GC.getNumGameSpeedInfos(), "NUM_GAMESPEED_TYPES", false);
DisplayXMLhardcodingError(NUM_GOODY_TYPES == (GoodyTypes)GC.getNumGoodyInfos(), "NUM_GOODY_TYPES", false);
DisplayXMLhardcodingError(NUM_HANDICAP_TYPES == (HandicapTypes)GC.getNumHandicapInfos(), "NUM_HANDICAP_TYPES", false);
DisplayXMLhardcodingError(NUM_HURRY_TYPES == (HurryTypes)GC.getNumHurryInfos(), "NUM_HURRY_TYPES", false);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_TUTORIAL", GC.getPlayerOptionInfo(PLAYEROPTION_TUTORIAL).getType()) == 0, "PLAYEROPTION_TUTORIAL", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_ADVISOR_POPUPS", GC.getPlayerOptionInfo(PLAYEROPTION_ADVISOR_POPUPS).getType()) == 0, "PLAYEROPTION_ADVISOR_POPUPS", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_ADVISOR_HELP", GC.getPlayerOptionInfo(PLAYEROPTION_ADVISOR_HELP).getType()) == 0, "PLAYEROPTION_ADVISOR_HELP", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_WAIT_END_TURN", GC.getPlayerOptionInfo(PLAYEROPTION_WAIT_END_TURN).getType()) == 0, "PLAYEROPTION_WAIT_END_TURN", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_MINIMIZE_POP_UPS", GC.getPlayerOptionInfo(PLAYEROPTION_MINIMIZE_POP_UPS).getType()) == 0, "PLAYEROPTION_MINIMIZE_POP_UPS", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_SHOW_FRIENDLY_MOVES", GC.getPlayerOptionInfo(PLAYEROPTION_SHOW_FRIENDLY_MOVES).getType()) == 0, "PLAYEROPTION_SHOW_FRIENDLY_MOVES", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_SHOW_ENEMY_MOVES", GC.getPlayerOptionInfo(PLAYEROPTION_SHOW_ENEMY_MOVES).getType()) == 0, "PLAYEROPTION_SHOW_ENEMY_MOVES", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_QUICK_MOVES", GC.getPlayerOptionInfo(PLAYEROPTION_QUICK_MOVES).getType()) == 0, "PLAYEROPTION_QUICK_MOVES", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_QUICK_ATTACK", GC.getPlayerOptionInfo(PLAYEROPTION_QUICK_ATTACK).getType()) == 0, "PLAYEROPTION_QUICK_ATTACK", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_QUICK_DEFENSE", GC.getPlayerOptionInfo(PLAYEROPTION_QUICK_DEFENSE).getType()) == 0, "PLAYEROPTION_QUICK_DEFENSE", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_STACK_ATTACK", GC.getPlayerOptionInfo(PLAYEROPTION_STACK_ATTACK).getType()) == 0, "PLAYEROPTION_STACK_ATTACK", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_AUTO_PROMOTION", GC.getPlayerOptionInfo(PLAYEROPTION_AUTO_PROMOTION).getType()) == 0, "PLAYEROPTION_AUTO_PROMOTION", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_SAFE_AUTOMATION", GC.getPlayerOptionInfo(PLAYEROPTION_SAFE_AUTOMATION).getType()) == 0, "PLAYEROPTION_SAFE_AUTOMATION", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_NUMPAD_HELP", GC.getPlayerOptionInfo(PLAYEROPTION_NUMPAD_HELP).getType()) == 0, "PLAYEROPTION_NUMPAD_HELP", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_NO_UNIT_CYCLING", GC.getPlayerOptionInfo(PLAYEROPTION_NO_UNIT_CYCLING).getType()) == 0, "PLAYEROPTION_NO_UNIT_CYCLING", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_NO_UNIT_RECOMMENDATIONS", GC.getPlayerOptionInfo(PLAYEROPTION_NO_UNIT_RECOMMENDATIONS).getType()) == 0, "PLAYEROPTION_NO_UNIT_RECOMMENDATIONS", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_RIGHT_CLICK_MENU", GC.getPlayerOptionInfo(PLAYEROPTION_RIGHT_CLICK_MENU).getType()) == 0, "PLAYEROPTION_RIGHT_CLICK_MENU", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_LEAVE_FORESTS", GC.getPlayerOptionInfo(PLAYEROPTION_LEAVE_FORESTS).getType()) == 0, "PLAYEROPTION_LEAVE_FORESTS", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_AUTO_LEAVE_YIELDS", GC.getPlayerOptionInfo(PLAYEROPTION_AUTO_LEAVE_YIELDS).getType()) == 0, "PLAYEROPTION_AUTO_LEAVE_YIELDS", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_MODDER_1", GC.getPlayerOptionInfo(PLAYEROPTION_MODDER_1).getType()) == 0, "PLAYEROPTION_MODDER_1", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_MODDER_2", GC.getPlayerOptionInfo(PLAYEROPTION_MODDER_2).getType()) == 0, "PLAYEROPTION_MODDER_2", true);
DisplayXMLhardcodingError(strcmp("PLAYEROPTION_MODDER_3", GC.getPlayerOptionInfo(PLAYEROPTION_MODDER_3).getType()) == 0, "PLAYEROPTION_MODDER_3", true);
DisplayXMLhardcodingError(NUM_PLAYEROPTION_TYPES == (PlayerOptionTypes)GC.getNumPlayerOptionInfos(), "NUM_PLAYEROPTION_TYPES", true);
DisplayXMLhardcodingError(NUM_SEALEVEL_TYPES == (SeaLevelTypes)GC.getNumSeaLevelInfos(), "NUM_SEALEVEL_TYPES", false);
DisplayXMLhardcodingError(strcmp("TRADE_SCREEN_EUROPE", GC.getTradeScreenInfo(TRADE_SCREEN_EUROPE).getType()) == 0, "TRADE_SCREEN_EUROPE", true);
DisplayXMLhardcodingError(strcmp("TRADE_SCREEN_AFRICA", GC.getTradeScreenInfo(TRADE_SCREEN_AFRICA).getType()) == 0, "TRADE_SCREEN_AFRICA", true);
DisplayXMLhardcodingError(strcmp("TRADE_SCREEN_PORT_ROYAL", GC.getTradeScreenInfo(TRADE_SCREEN_PORT_ROYAL).getType()) == 0, "TRADE_SCREEN_PORT_ROYAL", true);
DisplayXMLhardcodingError(NUM_TRADESCREEN_TYPES == (TradeScreenTypes)GC.getNumTradeScreenInfos(), "NUM_TRADESCREEN_TYPES", true);
DisplayXMLhardcodingError(NUM_VICTORY_TYPES == (VictoryTypes)GC.getNumVictoryInfos(), "NUM_VICTORY_TYPES", false);
DisplayXMLhardcodingError(strcmp("WORLDSIZE_TINY", GC.getWorldInfo(WORLDSIZE_TINY).getType()) == 0, "WORLDSIZE_TINY", true);
DisplayXMLhardcodingError(strcmp("WORLDSIZE_SMALL", GC.getWorldInfo(WORLDSIZE_SMALL).getType()) == 0, "WORLDSIZE_SMALL", true);
DisplayXMLhardcodingError(strcmp("WORLDSIZE_STANDARD", GC.getWorldInfo(WORLDSIZE_STANDARD).getType()) == 0, "WORLDSIZE_STANDARD", true);
DisplayXMLhardcodingError(strcmp("WORLDSIZE_LARGE", GC.getWorldInfo(WORLDSIZE_LARGE).getType()) == 0, "WORLDSIZE_LARGE", true);
DisplayXMLhardcodingError(strcmp("WORLDSIZE_HUGE", GC.getWorldInfo(WORLDSIZE_HUGE).getType()) == 0, "WORLDSIZE_HUGE", true);
DisplayXMLhardcodingError(strcmp("WORLDSIZE_GIGANTIC", GC.getWorldInfo(WORLDSIZE_GIGANTIC).getType()) == 0, "WORLDSIZE_GIGANTIC", true);
DisplayXMLhardcodingError(NUM_WORLDSIZE_TYPES == (WorldSizeTypes)GC.getNumWorldInfos(), "NUM_WORLDSIZE_TYPES", true);
DisplayXMLhardcodingError(NUM_EFFECT_TYPES == (EffectTypes)GC.getNumEffectInfos(), "NUM_EFFECT_TYPES", false);
DisplayXMLhardcodingError(NUM_ROUTE_TYPES == (RouteTypes)GC.getNumRouteInfos(), "NUM_ROUTE_TYPES", false);
DisplayXMLhardcodingError(NUM_BONUS_TYPES == (BonusTypes)GC.getNumBonusInfos(), "NUM_BONUS_TYPES", false);
DisplayXMLhardcodingError(NUM_FEATURE_TYPES == (FeatureTypes)GC.getNumFeatureInfos(), "NUM_FEATURE_TYPES", false);
DisplayXMLhardcodingError(NUM_IMPROVEMENT_TYPES == (ImprovementTypes)GC.getNumImprovementInfos(), "NUM_IMPROVEMENT_TYPES", false);
DisplayXMLhardcodingError(strcmp("TERRAIN_GRASS", GC.getTerrainInfo(TERRAIN_GRASS).getType()) == 0, "TERRAIN_GRASS", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_SAVANNAH", GC.getTerrainInfo(TERRAIN_SAVANNAH).getType()) == 0, "TERRAIN_SAVANNAH", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_PLAINS", GC.getTerrainInfo(TERRAIN_PLAINS).getType()) == 0, "TERRAIN_PLAINS", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_DESERT", GC.getTerrainInfo(TERRAIN_DESERT).getType()) == 0, "TERRAIN_DESERT", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_MARSH", GC.getTerrainInfo(TERRAIN_MARSH).getType()) == 0, "TERRAIN_MARSH", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_TUNDRA", GC.getTerrainInfo(TERRAIN_TUNDRA).getType()) == 0, "TERRAIN_TUNDRA", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_SNOW", GC.getTerrainInfo(TERRAIN_SNOW).getType()) == 0, "TERRAIN_SNOW", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_COAST", GC.getTerrainInfo(TERRAIN_COAST).getType()) == 0, "TERRAIN_COAST", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_LARGE_RIVERS", GC.getTerrainInfo(TERRAIN_LARGE_RIVERS).getType()) == 0, "TERRAIN_LARGE_RIVERS", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_LAKE", GC.getTerrainInfo(TERRAIN_LAKE).getType()) == 0, "TERRAIN_LAKE", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_OCEAN", GC.getTerrainInfo(TERRAIN_OCEAN).getType()) == 0, "TERRAIN_OCEAN", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_PEAK", GC.getTerrainInfo(TERRAIN_PEAK).getType()) == 0, "TERRAIN_PEAK", true);
DisplayXMLhardcodingError(strcmp("TERRAIN_HILL", GC.getTerrainInfo(TERRAIN_HILL).getType()) == 0, "TERRAIN_HILL", true);
DisplayXMLhardcodingError(NUM_TERRAIN_TYPES == (TerrainTypes)GC.getNumTerrainInfos(), "NUM_TERRAIN_TYPES", true);
DisplayXMLhardcodingError(strcmp("YIELD_FOOD", GC.getYieldInfo(YIELD_FOOD).getType()) == 0, "YIELD_FOOD", true);
DisplayXMLhardcodingError(strcmp("YIELD_LUMBER", GC.getYieldInfo(YIELD_LUMBER).getType()) == 0, "YIELD_LUMBER", true);
DisplayXMLhardcodingError(strcmp("YIELD_STONE", GC.getYieldInfo(YIELD_STONE).getType()) == 0, "YIELD_STONE", true);
DisplayXMLhardcodingError(strcmp("YIELD_HEMP", GC.getYieldInfo(YIELD_HEMP).getType()) == 0, "YIELD_HEMP", true);
DisplayXMLhardcodingError(strcmp("YIELD_ORE", GC.getYieldInfo(YIELD_ORE).getType()) == 0, "YIELD_ORE", true);
DisplayXMLhardcodingError(strcmp("YIELD_SHEEP", GC.getYieldInfo(YIELD_SHEEP).getType()) == 0, "YIELD_SHEEP", true);
DisplayXMLhardcodingError(strcmp("YIELD_CATTLE", GC.getYieldInfo(YIELD_CATTLE).getType()) == 0, "YIELD_CATTLE", true);
DisplayXMLhardcodingError(strcmp("YIELD_HORSES", GC.getYieldInfo(YIELD_HORSES).getType()) == 0, "YIELD_HORSES", true);
DisplayXMLhardcodingError(strcmp("YIELD_COCA_LEAVES", GC.getYieldInfo(YIELD_COCA_LEAVES).getType()) == 0, "YIELD_COCA_LEAVES", true);
DisplayXMLhardcodingError(strcmp("YIELD_COCOA_FRUITS", GC.getYieldInfo(YIELD_COCOA_FRUITS).getType()) == 0, "YIELD_COCOA_FRUITS", true);
DisplayXMLhardcodingError(strcmp("YIELD_COFFEE_BERRIES", GC.getYieldInfo(YIELD_COFFEE_BERRIES).getType()) == 0, "YIELD_COFFEE_BERRIES", true);
DisplayXMLhardcodingError(strcmp("YIELD_TOBACCO", GC.getYieldInfo(YIELD_TOBACCO).getType()) == 0, "YIELD_TOBACCO", true);
DisplayXMLhardcodingError(strcmp("YIELD_WOOL", GC.getYieldInfo(YIELD_WOOL).getType()) == 0, "YIELD_WOOL", true);
DisplayXMLhardcodingError(strcmp("YIELD_COTTON", GC.getYieldInfo(YIELD_COTTON).getType()) == 0, "YIELD_COTTON", true);
DisplayXMLhardcodingError(strcmp("YIELD_INDIGO", GC.getYieldInfo(YIELD_INDIGO).getType()) == 0, "YIELD_INDIGO", true);
DisplayXMLhardcodingError(strcmp("YIELD_HIDES", GC.getYieldInfo(YIELD_HIDES).getType()) == 0, "YIELD_HIDES", true);
DisplayXMLhardcodingError(strcmp("YIELD_FUR", GC.getYieldInfo(YIELD_FUR).getType()) == 0, "YIELD_FUR", true);
DisplayXMLhardcodingError(strcmp("YIELD_PREMIUM_FUR", GC.getYieldInfo(YIELD_PREMIUM_FUR).getType()) == 0, "YIELD_PREMIUM_FUR", true);
DisplayXMLhardcodingError(strcmp("YIELD_RAW_SALT", GC.getYieldInfo(YIELD_RAW_SALT).getType()) == 0, "YIELD_RAW_SALT", true);
DisplayXMLhardcodingError(strcmp("YIELD_RED_PEPPER", GC.getYieldInfo(YIELD_RED_PEPPER).getType()) == 0, "YIELD_RED_PEPPER", true);
DisplayXMLhardcodingError(strcmp("YIELD_BARLEY", GC.getYieldInfo(YIELD_BARLEY).getType()) == 0, "YIELD_BARLEY", true);
DisplayXMLhardcodingError(strcmp("YIELD_SUGAR", GC.getYieldInfo(YIELD_SUGAR).getType()) == 0, "YIELD_SUGAR", true);
DisplayXMLhardcodingError(strcmp("YIELD_GRAPES", GC.getYieldInfo(YIELD_GRAPES).getType()) == 0, "YIELD_GRAPES", true);
DisplayXMLhardcodingError(strcmp("YIELD_WHALE_BLUBBER", GC.getYieldInfo(YIELD_WHALE_BLUBBER).getType()) == 0, "YIELD_WHALE_BLUBBER", true);
DisplayXMLhardcodingError(strcmp("YIELD_VALUABLE_WOOD", GC.getYieldInfo(YIELD_VALUABLE_WOOD).getType()) == 0, "YIELD_VALUABLE_WOOD", true);
DisplayXMLhardcodingError(strcmp("YIELD_TRADE_GOODS", GC.getYieldInfo(YIELD_TRADE_GOODS).getType()) == 0, "YIELD_TRADE_GOODS", true);
DisplayXMLhardcodingError(strcmp("YIELD_ROPE", GC.getYieldInfo(YIELD_ROPE).getType()) == 0, "YIELD_ROPE", true);
DisplayXMLhardcodingError(strcmp("YIELD_SAILCLOTH", GC.getYieldInfo(YIELD_SAILCLOTH).getType()) == 0, "YIELD_SAILCLOTH", true);
DisplayXMLhardcodingError(strcmp("YIELD_TOOLS", GC.getYieldInfo(YIELD_TOOLS).getType()) == 0, "YIELD_TOOLS", true);
DisplayXMLhardcodingError(strcmp("YIELD_BLADES", GC.getYieldInfo(YIELD_BLADES).getType()) == 0, "YIELD_BLADES", true);
DisplayXMLhardcodingError(strcmp("YIELD_MUSKETS", GC.getYieldInfo(YIELD_MUSKETS).getType()) == 0, "YIELD_MUSKETS", true);
DisplayXMLhardcodingError(strcmp("YIELD_CANNONS", GC.getYieldInfo(YIELD_CANNONS).getType()) == 0, "YIELD_CANNONS", true);
DisplayXMLhardcodingError(strcmp("YIELD_SILVER", GC.getYieldInfo(YIELD_SILVER).getType()) == 0, "YIELD_SILVER", true);
DisplayXMLhardcodingError(strcmp("YIELD_GOLD", GC.getYieldInfo(YIELD_GOLD).getType()) == 0, "YIELD_GOLD", true);
DisplayXMLhardcodingError(strcmp("YIELD_GEMS", GC.getYieldInfo(YIELD_GEMS).getType()) == 0, "YIELD_GEMS", true);
DisplayXMLhardcodingError(strcmp("YIELD_COCOA", GC.getYieldInfo(YIELD_COCOA).getType()) == 0, "YIELD_COCOA", true);
DisplayXMLhardcodingError(strcmp("YIELD_COFFEE", GC.getYieldInfo(YIELD_COFFEE).getType()) == 0, "YIELD_COFFEE", true);
DisplayXMLhardcodingError(strcmp("YIELD_CIGARS", GC.getYieldInfo(YIELD_CIGARS).getType()) == 0, "YIELD_CIGARS", true);
DisplayXMLhardcodingError(strcmp("YIELD_WOOL_CLOTH", GC.getYieldInfo(YIELD_WOOL_CLOTH).getType()) == 0, "YIELD_WOOL_CLOTH", true);
DisplayXMLhardcodingError(strcmp("YIELD_CLOTH", GC.getYieldInfo(YIELD_CLOTH).getType()) == 0, "YIELD_CLOTH", true);
DisplayXMLhardcodingError(strcmp("YIELD_COLOURED_CLOTH", GC.getYieldInfo(YIELD_COLOURED_CLOTH).getType()) == 0, "YIELD_COLOURED_CLOTH", true);
DisplayXMLhardcodingError(strcmp("YIELD_LEATHER", GC.getYieldInfo(YIELD_LEATHER).getType()) == 0, "YIELD_LEATHER", true);
DisplayXMLhardcodingError(strcmp("YIELD_COATS", GC.getYieldInfo(YIELD_COATS).getType()) == 0, "YIELD_COATS", true);
DisplayXMLhardcodingError(strcmp("YIELD_PREMIUM_COATS", GC.getYieldInfo(YIELD_PREMIUM_COATS).getType()) == 0, "YIELD_PREMIUM_COATS", true);
DisplayXMLhardcodingError(strcmp("YIELD_SALT", GC.getYieldInfo(YIELD_SALT).getType()) == 0, "YIELD_SALT", true);
DisplayXMLhardcodingError(strcmp("YIELD_SPICES", GC.getYieldInfo(YIELD_SPICES).getType()) == 0, "YIELD_SPICES", true);
DisplayXMLhardcodingError(strcmp("YIELD_BEER", GC.getYieldInfo(YIELD_BEER).getType()) == 0, "YIELD_BEER", true);
DisplayXMLhardcodingError(strcmp("YIELD_RUM", GC.getYieldInfo(YIELD_RUM).getType()) == 0, "YIELD_RUM", true);
DisplayXMLhardcodingError(strcmp("YIELD_WINE", GC.getYieldInfo(YIELD_WINE).getType()) == 0, "YIELD_WINE", true);
DisplayXMLhardcodingError(strcmp("YIELD_WHALE_OIL", GC.getYieldInfo(YIELD_WHALE_OIL).getType()) == 0, "YIELD_WHALE_OIL", true);
DisplayXMLhardcodingError(strcmp("YIELD_FURNITURE", GC.getYieldInfo(YIELD_FURNITURE).getType()) == 0, "YIELD_FURNITURE", true);
DisplayXMLhardcodingError(strcmp("YIELD_LUXURY_GOODS", GC.getYieldInfo(YIELD_LUXURY_GOODS).getType()) == 0, "YIELD_LUXURY_GOODS", true);
DisplayXMLhardcodingError(strcmp("YIELD_HAMMERS", GC.getYieldInfo(YIELD_HAMMERS).getType()) == 0, "YIELD_HAMMERS", true);
DisplayXMLhardcodingError(strcmp("YIELD_BELLS", GC.getYieldInfo(YIELD_BELLS).getType()) == 0, "YIELD_BELLS", true);
DisplayXMLhardcodingError(strcmp("YIELD_CROSSES", GC.getYieldInfo(YIELD_CROSSES).getType()) == 0, "YIELD_CROSSES", true);
DisplayXMLhardcodingError(strcmp("YIELD_CULTURE", GC.getYieldInfo(YIELD_CULTURE).getType()) == 0, "YIELD_CULTURE", true);
DisplayXMLhardcodingError(strcmp("YIELD_HEALTH", GC.getYieldInfo(YIELD_HEALTH).getType()) == 0, "YIELD_HEALTH", true);
DisplayXMLhardcodingError(strcmp("YIELD_EDUCATION", GC.getYieldInfo(YIELD_EDUCATION).getType()) == 0, "YIELD_EDUCATION", true);
DisplayXMLhardcodingError(strcmp("YIELD_HAPPINESS", GC.getYieldInfo(YIELD_HAPPINESS).getType()) == 0, "YIELD_HAPPINESS", true);
DisplayXMLhardcodingError(strcmp("YIELD_UNHAPPINESS", GC.getYieldInfo(YIELD_UNHAPPINESS).getType()) == 0, "YIELD_UNHAPPINESS", true);
DisplayXMLhardcodingError(strcmp("YIELD_HEARTS", GC.getYieldInfo(YIELD_HEARTS).getType()) == 0, "YIELD_HEARTS", true);
DisplayXMLhardcodingError(NUM_YIELD_TYPES == (YieldTypes)m_paYieldInfo.size(), "NUM_YIELD_TYPES", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_BUILD", GC.getAutomateInfo(AUTOMATE_BUILD).getType()) == 0, "AUTOMATE_BUILD", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_CITY", GC.getAutomateInfo(AUTOMATE_CITY).getType()) == 0, "AUTOMATE_CITY", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_EXPLORE", GC.getAutomateInfo(AUTOMATE_EXPLORE).getType()) == 0, "AUTOMATE_EXPLORE", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_SAIL_TO_EUROPE", GC.getAutomateInfo(AUTOMATE_SAIL_TO_EUROPE).getType()) == 0, "AUTOMATE_SAIL_TO_EUROPE", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_SAIL_TO_AFRICA", GC.getAutomateInfo(AUTOMATE_SAIL_TO_AFRICA).getType()) == 0, "AUTOMATE_SAIL_TO_AFRICA", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_SAIL_TO_PORT_ROYAL", GC.getAutomateInfo(AUTOMATE_SAIL_TO_PORT_ROYAL).getType()) == 0, "AUTOMATE_SAIL_TO_PORT_ROYAL", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_TRANSPORT_ROUTES", GC.getAutomateInfo(AUTOMATE_TRANSPORT_ROUTES).getType()) == 0, "AUTOMATE_TRANSPORT_ROUTES", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_TRANSPORT_FULL", GC.getAutomateInfo(AUTOMATE_TRANSPORT_FULL).getType()) == 0, "AUTOMATE_TRANSPORT_FULL", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_WORKER_SEA", GC.getAutomateInfo(AUTOMATE_WORKER_SEA).getType()) == 0, "AUTOMATE_WORKER_SEA", true);
DisplayXMLhardcodingError(strcmp("AUTOMATE_FULL", GC.getAutomateInfo(AUTOMATE_FULL).getType()) == 0, "AUTOMATE_FULL", true);
DisplayXMLhardcodingError(NUM_AUTOMATE_TYPES == (AutomateTypes)GC.getNumAutomateInfos(), "NUM_AUTOMATE_TYPES", true);
DisplayXMLhardcodingError(NUM_BUILD_TYPES == (BuildTypes)GC.getNumBuildInfos(), "NUM_BUILD_TYPES", false);
DisplayXMLhardcodingError(strcmp("COMMAND_PROMOTION", GC.getCommandInfo(COMMAND_PROMOTION).getType()) == 0, "COMMAND_PROMOTION", true);
DisplayXMLhardcodingError(strcmp("COMMAND_UPGRADE", GC.getCommandInfo(COMMAND_UPGRADE).getType()) == 0, "COMMAND_UPGRADE", true);
DisplayXMLhardcodingError(strcmp("COMMAND_AUTOMATE", GC.getCommandInfo(COMMAND_AUTOMATE).getType()) == 0, "COMMAND_AUTOMATE", true);
DisplayXMLhardcodingError(strcmp("COMMAND_WAKE", GC.getCommandInfo(COMMAND_WAKE).getType()) == 0, "COMMAND_WAKE", true);
DisplayXMLhardcodingError(strcmp("COMMAND_CANCEL", GC.getCommandInfo(COMMAND_CANCEL).getType()) == 0, "COMMAND_CANCEL", true);
DisplayXMLhardcodingError(strcmp("COMMAND_CANCEL_ALL", GC.getCommandInfo(COMMAND_CANCEL_ALL).getType()) == 0, "COMMAND_CANCEL_ALL", true);
DisplayXMLhardcodingError(strcmp("COMMAND_STOP_AUTOMATION", GC.getCommandInfo(COMMAND_STOP_AUTOMATION).getType()) == 0, "COMMAND_STOP_AUTOMATION", true);
DisplayXMLhardcodingError(strcmp("COMMAND_DELETE", GC.getCommandInfo(COMMAND_DELETE).getType()) == 0, "COMMAND_DELETE", true);
DisplayXMLhardcodingError(strcmp("COMMAND_GIFT", GC.getCommandInfo(COMMAND_GIFT).getType()) == 0, "COMMAND_GIFT", true);
DisplayXMLhardcodingError(strcmp("COMMAND_LOAD", GC.getCommandInfo(COMMAND_LOAD).getType()) == 0, "COMMAND_LOAD", true);
DisplayXMLhardcodingError(strcmp("COMMAND_LOAD_UNIT", GC.getCommandInfo(COMMAND_LOAD_UNIT).getType()) == 0, "COMMAND_LOAD_UNIT", true);
DisplayXMLhardcodingError(strcmp("COMMAND_LOAD_CARGO", GC.getCommandInfo(COMMAND_LOAD_CARGO).getType()) == 0, "COMMAND_LOAD_CARGO", true);
DisplayXMLhardcodingError(strcmp("COMMAND_LOAD_YIELD", GC.getCommandInfo(COMMAND_LOAD_YIELD).getType()) == 0, "COMMAND_LOAD_YIELD", true);
DisplayXMLhardcodingError(strcmp("COMMAND_UNLOAD", GC.getCommandInfo(COMMAND_UNLOAD).getType()) == 0, "COMMAND_UNLOAD", true);
DisplayXMLhardcodingError(strcmp("COMMAND_UNLOAD_ALL", GC.getCommandInfo(COMMAND_UNLOAD_ALL).getType()) == 0, "COMMAND_UNLOAD_ALL", true);
DisplayXMLhardcodingError(strcmp("COMMAND_LEARN", GC.getCommandInfo(COMMAND_LEARN).getType()) == 0, "COMMAND_LEARN", true);
DisplayXMLhardcodingError(strcmp("COMMAND_KING_TRANSPORT", GC.getCommandInfo(COMMAND_KING_TRANSPORT).getType()) == 0, "COMMAND_KING_TRANSPORT", true);
DisplayXMLhardcodingError(strcmp("COMMAND_ESTABLISH_MISSION", GC.getCommandInfo(COMMAND_ESTABLISH_MISSION).getType()) == 0, "COMMAND_ESTABLISH_MISSION", true);
DisplayXMLhardcodingError(strcmp("COMMAND_SPEAK_WITH_CHIEF", GC.getCommandInfo(COMMAND_SPEAK_WITH_CHIEF).getType()) == 0, "COMMAND_SPEAK_WITH_CHIEF", true);
DisplayXMLhardcodingError(strcmp("COMMAND_YIELD_TRADE", GC.getCommandInfo(COMMAND_YIELD_TRADE).getType()) == 0, "COMMAND_YIELD_TRADE", true);
DisplayXMLhardcodingError(strcmp("COMMAND_SAIL_TO_EUROPE", GC.getCommandInfo(COMMAND_SAIL_TO_EUROPE).getType()) == 0, "COMMAND_SAIL_TO_EUROPE", true);
DisplayXMLhardcodingError(strcmp("COMMAND_CHOOSE_TRADE_ROUTES", GC.getCommandInfo(COMMAND_CHOOSE_TRADE_ROUTES).getType()) == 0, "COMMAND_CHOOSE_TRADE_ROUTES", true);
DisplayXMLhardcodingError(strcmp("COMMAND_ASSIGN_TRADE_ROUTE", GC.getCommandInfo(COMMAND_ASSIGN_TRADE_ROUTE).getType()) == 0, "COMMAND_ASSIGN_TRADE_ROUTE", true);
DisplayXMLhardcodingError(strcmp("COMMAND_PROMOTE", GC.getCommandInfo(COMMAND_PROMOTE).getType()) == 0, "COMMAND_PROMOTE", true);
DisplayXMLhardcodingError(strcmp("COMMAND_PROFESSION", GC.getCommandInfo(COMMAND_PROFESSION).getType()) == 0, "COMMAND_PROFESSION", true);
DisplayXMLhardcodingError(strcmp("COMMAND_CLEAR_SPECIALTY", GC.getCommandInfo(COMMAND_CLEAR_SPECIALTY).getType()) == 0, "COMMAND_CLEAR_SPECIALTY", true);
DisplayXMLhardcodingError(strcmp("COMMAND_HOTKEY", GC.getCommandInfo(COMMAND_HOTKEY).getType()) == 0, "COMMAND_HOTKEY", true);
DisplayXMLhardcodingError(strcmp("COMMAND_STIR_UP_NATIVES", GC.getCommandInfo(COMMAND_STIR_UP_NATIVES).getType()) == 0, "COMMAND_STIR_UP_NATIVES", true);
DisplayXMLhardcodingError(strcmp("COMMAND_GOTO_MENU", GC.getCommandInfo(COMMAND_GOTO_MENU).getType()) == 0, "COMMAND_GOTO_MENU", true);
DisplayXMLhardcodingError(strcmp("COMMAND_IGNORE_DANGER", GC.getCommandInfo(COMMAND_IGNORE_DANGER).getType()) == 0, "COMMAND_IGNORE_DANGER", true);
DisplayXMLhardcodingError(strcmp("COMMAND_SAIL_TO_AFRICA", GC.getCommandInfo(COMMAND_SAIL_TO_AFRICA).getType()) == 0, "COMMAND_SAIL_TO_AFRICA", true);
DisplayXMLhardcodingError(strcmp("COMMAND_SAIL_TO_PORT_ROYAL", GC.getCommandInfo(COMMAND_SAIL_TO_PORT_ROYAL).getType()) == 0, "COMMAND_SAIL_TO_PORT_ROYAL", true);
DisplayXMLhardcodingError(strcmp("COMMAND_MERGE_TREASURES", GC.getCommandInfo(COMMAND_MERGE_TREASURES).getType()) == 0, "COMMAND_MERGE_TREASURES", true);
DisplayXMLhardcodingError(strcmp("COMMAND_ESTABLISH_TRADE_POST", GC.getCommandInfo(COMMAND_ESTABLISH_TRADE_POST).getType()) == 0, "COMMAND_ESTABLISH_TRADE_POST", true);
DisplayXMLhardcodingError(NUM_COMMAND_TYPES == (CommandTypes)GC.getNumCommandInfos(), "NUM_COMMAND_TYPES", true);
DisplayXMLhardcodingError(strcmp("CONTROL_CENTERONSELECTION", GC.getControlInfo(CONTROL_CENTERONSELECTION).getType()) == 0, "CONTROL_CENTERONSELECTION", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SELECTYUNITTYPE", GC.getControlInfo(CONTROL_SELECTYUNITTYPE).getType()) == 0, "CONTROL_SELECTYUNITTYPE", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SELECTYUNITALL", GC.getControlInfo(CONTROL_SELECTYUNITALL).getType()) == 0, "CONTROL_SELECTYUNITALL", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SELECTCITY", GC.getControlInfo(CONTROL_SELECTCITY).getType()) == 0, "CONTROL_SELECTCITY", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SELECTCAPITAL", GC.getControlInfo(CONTROL_SELECTCAPITAL).getType()) == 0, "CONTROL_SELECTCAPITAL", true);
DisplayXMLhardcodingError(strcmp("CONTROL_NEXTCITY", GC.getControlInfo(CONTROL_NEXTCITY).getType()) == 0, "CONTROL_NEXTCITY", true);
DisplayXMLhardcodingError(strcmp("CONTROL_PREVCITY", GC.getControlInfo(CONTROL_PREVCITY).getType()) == 0, "CONTROL_PREVCITY", true);
DisplayXMLhardcodingError(strcmp("CONTROL_NEXTUNIT", GC.getControlInfo(CONTROL_NEXTUNIT).getType()) == 0, "CONTROL_NEXTUNIT", true);
DisplayXMLhardcodingError(strcmp("CONTROL_PREVUNIT", GC.getControlInfo(CONTROL_PREVUNIT).getType()) == 0, "CONTROL_PREVUNIT", true);
DisplayXMLhardcodingError(strcmp("CONTROL_CYCLEUNIT", GC.getControlInfo(CONTROL_CYCLEUNIT).getType()) == 0, "CONTROL_CYCLEUNIT", true);
DisplayXMLhardcodingError(strcmp("CONTROL_CYCLEUNIT_ALT", GC.getControlInfo(CONTROL_CYCLEUNIT_ALT).getType()) == 0, "CONTROL_CYCLEUNIT_ALT", true);
DisplayXMLhardcodingError(strcmp("CONTROL_LASTUNIT", GC.getControlInfo(CONTROL_LASTUNIT).getType()) == 0, "CONTROL_LASTUNIT", true);
DisplayXMLhardcodingError(strcmp("CONTROL_ENDTURN", GC.getControlInfo(CONTROL_ENDTURN).getType()) == 0, "CONTROL_ENDTURN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_ENDTURN_ALT", GC.getControlInfo(CONTROL_ENDTURN_ALT).getType()) == 0, "CONTROL_ENDTURN_ALT", true);
DisplayXMLhardcodingError(strcmp("CONTROL_FORCEENDTURN", GC.getControlInfo(CONTROL_FORCEENDTURN).getType()) == 0, "CONTROL_FORCEENDTURN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_AUTOMOVES", GC.getControlInfo(CONTROL_AUTOMOVES).getType()) == 0, "CONTROL_AUTOMOVES", true);
DisplayXMLhardcodingError(strcmp("CONTROL_PING", GC.getControlInfo(CONTROL_PING).getType()) == 0, "CONTROL_PING", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SIGN", GC.getControlInfo(CONTROL_SIGN).getType()) == 0, "CONTROL_SIGN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_GRID", GC.getControlInfo(CONTROL_GRID).getType()) == 0, "CONTROL_GRID", true);
DisplayXMLhardcodingError(strcmp("CONTROL_BARE_MAP", GC.getControlInfo(CONTROL_BARE_MAP).getType()) == 0, "CONTROL_BARE_MAP", true);
DisplayXMLhardcodingError(strcmp("CONTROL_YIELDS", GC.getControlInfo(CONTROL_YIELDS).getType()) == 0, "CONTROL_YIELDS", true);
DisplayXMLhardcodingError(strcmp("CONTROL_RESOURCE_ALL", GC.getControlInfo(CONTROL_RESOURCE_ALL).getType()) == 0, "CONTROL_RESOURCE_ALL", true);
DisplayXMLhardcodingError(strcmp("CONTROL_UNIT_ICONS", GC.getControlInfo(CONTROL_UNIT_ICONS).getType()) == 0, "CONTROL_UNIT_ICONS", true);
DisplayXMLhardcodingError(strcmp("CONTROL_GLOBELAYER", GC.getControlInfo(CONTROL_GLOBELAYER).getType()) == 0, "CONTROL_GLOBELAYER", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SCORES", GC.getControlInfo(CONTROL_SCORES).getType()) == 0, "CONTROL_SCORES", true);
DisplayXMLhardcodingError(strcmp("CONTROL_LOAD_GAME", GC.getControlInfo(CONTROL_LOAD_GAME).getType()) == 0, "CONTROL_LOAD_GAME", true);
DisplayXMLhardcodingError(strcmp("CONTROL_OPTIONS_SCREEN", GC.getControlInfo(CONTROL_OPTIONS_SCREEN).getType()) == 0, "CONTROL_OPTIONS_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_RETIRE", GC.getControlInfo(CONTROL_RETIRE).getType()) == 0, "CONTROL_RETIRE", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SAVE_GROUP", GC.getControlInfo(CONTROL_SAVE_GROUP).getType()) == 0, "CONTROL_SAVE_GROUP", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SAVE_NORMAL", GC.getControlInfo(CONTROL_SAVE_NORMAL).getType()) == 0, "CONTROL_SAVE_NORMAL", true);
DisplayXMLhardcodingError(strcmp("CONTROL_QUICK_SAVE", GC.getControlInfo(CONTROL_QUICK_SAVE).getType()) == 0, "CONTROL_QUICK_SAVE", true);
DisplayXMLhardcodingError(strcmp("CONTROL_QUICK_LOAD", GC.getControlInfo(CONTROL_QUICK_LOAD).getType()) == 0, "CONTROL_QUICK_LOAD", true);
DisplayXMLhardcodingError(strcmp("CONTROL_ORTHO_CAMERA", GC.getControlInfo(CONTROL_ORTHO_CAMERA).getType()) == 0, "CONTROL_ORTHO_CAMERA", true);
DisplayXMLhardcodingError(strcmp("CONTROL_CYCLE_CAMERA_FLYING_MODES", GC.getControlInfo(CONTROL_CYCLE_CAMERA_FLYING_MODES).getType()) == 0, "CONTROL_CYCLE_CAMERA_FLYING_MODES", true);
DisplayXMLhardcodingError(strcmp("CONTROL_ISOMETRIC_CAMERA_LEFT", GC.getControlInfo(CONTROL_ISOMETRIC_CAMERA_LEFT).getType()) == 0, "CONTROL_ISOMETRIC_CAMERA_LEFT", true);
DisplayXMLhardcodingError(strcmp("CONTROL_ISOMETRIC_CAMERA_RIGHT", GC.getControlInfo(CONTROL_ISOMETRIC_CAMERA_RIGHT).getType()) == 0, "CONTROL_ISOMETRIC_CAMERA_RIGHT", true);
DisplayXMLhardcodingError(strcmp("CONTROL_FLYING_CAMERA", GC.getControlInfo(CONTROL_FLYING_CAMERA).getType()) == 0, "CONTROL_FLYING_CAMERA", true);
DisplayXMLhardcodingError(strcmp("CONTROL_MOUSE_FLYING_CAMERA", GC.getControlInfo(CONTROL_MOUSE_FLYING_CAMERA).getType()) == 0, "CONTROL_MOUSE_FLYING_CAMERA", true);
DisplayXMLhardcodingError(strcmp("CONTROL_TOP_DOWN_CAMERA", GC.getControlInfo(CONTROL_TOP_DOWN_CAMERA).getType()) == 0, "CONTROL_TOP_DOWN_CAMERA", true);
DisplayXMLhardcodingError(strcmp("CONTROL_CIVILOPEDIA", GC.getControlInfo(CONTROL_CIVILOPEDIA).getType()) == 0, "CONTROL_CIVILOPEDIA", true);
DisplayXMLhardcodingError(strcmp("CONTROL_FOREIGN_SCREEN", GC.getControlInfo(CONTROL_FOREIGN_SCREEN).getType()) == 0, "CONTROL_FOREIGN_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_CONGRESS_SCREEN", GC.getControlInfo(CONTROL_CONGRESS_SCREEN).getType()) == 0, "CONTROL_CONGRESS_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_REVOLUTION_SCREEN", GC.getControlInfo(CONTROL_REVOLUTION_SCREEN).getType()) == 0, "CONTROL_REVOLUTION_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_EUROPE_SCREEN", GC.getControlInfo(CONTROL_EUROPE_SCREEN).getType()) == 0, "CONTROL_EUROPE_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_MILITARY_SCREEN", GC.getControlInfo(CONTROL_MILITARY_SCREEN).getType()) == 0, "CONTROL_MILITARY_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_FATHER_SCREEN", GC.getControlInfo(CONTROL_FATHER_SCREEN).getType()) == 0, "CONTROL_FATHER_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_TURN_LOG", GC.getControlInfo(CONTROL_TURN_LOG).getType()) == 0, "CONTROL_TURN_LOG", true);
DisplayXMLhardcodingError(strcmp("CONTROL_CHAT_ALL", GC.getControlInfo(CONTROL_CHAT_ALL).getType()) == 0, "CONTROL_CHAT_ALL", true);
DisplayXMLhardcodingError(strcmp("CONTROL_CHAT_TEAM", GC.getControlInfo(CONTROL_CHAT_TEAM).getType()) == 0, "CONTROL_CHAT_TEAM", true);
DisplayXMLhardcodingError(strcmp("CONTROL_DOMESTIC_SCREEN", GC.getControlInfo(CONTROL_DOMESTIC_SCREEN).getType()) == 0, "CONTROL_DOMESTIC_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_VICTORY_SCREEN", GC.getControlInfo(CONTROL_VICTORY_SCREEN).getType()) == 0, "CONTROL_VICTORY_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_INFO", GC.getControlInfo(CONTROL_INFO).getType()) == 0, "CONTROL_INFO", true);
DisplayXMLhardcodingError(strcmp("CONTROL_GLOBE_VIEW", GC.getControlInfo(CONTROL_GLOBE_VIEW).getType()) == 0, "CONTROL_GLOBE_VIEW", true);
DisplayXMLhardcodingError(strcmp("CONTROL_DETAILS", GC.getControlInfo(CONTROL_DETAILS).getType()) == 0, "CONTROL_DETAILS", true);
DisplayXMLhardcodingError(strcmp("CONTROL_ADMIN_DETAILS", GC.getControlInfo(CONTROL_ADMIN_DETAILS).getType()) == 0, "CONTROL_ADMIN_DETAILS", true);
DisplayXMLhardcodingError(strcmp("CONTROL_HALL_OF_FAME", GC.getControlInfo(CONTROL_HALL_OF_FAME).getType()) == 0, "CONTROL_HALL_OF_FAME", true);
DisplayXMLhardcodingError(strcmp("CONTROL_WORLD_BUILDER", GC.getControlInfo(CONTROL_WORLD_BUILDER).getType()) == 0, "CONTROL_WORLD_BUILDER", true);
DisplayXMLhardcodingError(strcmp("CONTROL_DIPLOMACY", GC.getControlInfo(CONTROL_DIPLOMACY).getType()) == 0, "CONTROL_DIPLOMACY", true);
DisplayXMLhardcodingError(strcmp("CONTROL_SELECT_HEALTHY", GC.getControlInfo(CONTROL_SELECT_HEALTHY).getType()) == 0, "CONTROL_SELECT_HEALTHY", true);
DisplayXMLhardcodingError(strcmp("CONTROL_FREE_COLONY", GC.getControlInfo(CONTROL_FREE_COLONY).getType()) == 0, "CONTROL_FREE_COLONY", true);
DisplayXMLhardcodingError(strcmp("CONTROL_AFRICA_SCREEN", GC.getControlInfo(CONTROL_AFRICA_SCREEN).getType()) == 0, "CONTROL_AFRICA_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_PORT_ROYAL_SCREEN", GC.getControlInfo(CONTROL_PORT_ROYAL_SCREEN).getType()) == 0, "CONTROL_PORT_ROYAL_SCREEN", true);
DisplayXMLhardcodingError(strcmp("CONTROL_ACHIEVE_SCREEN", GC.getControlInfo(CONTROL_ACHIEVE_SCREEN).getType()) == 0, "CONTROL_ACHIEVE_SCREEN", true);
DisplayXMLhardcodingError(NUM_CONTROL_TYPES == (ControlTypes)GC.getNumControlInfos(), "NUM_CONTROL_TYPES", true);
DisplayXMLhardcodingError(strcmp("MISSION_MOVE_TO", GC.getMissionInfo(MISSION_MOVE_TO).getType()) == 0, "MISSION_MOVE_TO", true);
DisplayXMLhardcodingError(strcmp("MISSION_ROUTE_TO", GC.getMissionInfo(MISSION_ROUTE_TO).getType()) == 0, "MISSION_ROUTE_TO", true);
DisplayXMLhardcodingError(strcmp("MISSION_MOVE_TO_UNIT", GC.getMissionInfo(MISSION_MOVE_TO_UNIT).getType()) == 0, "MISSION_MOVE_TO_UNIT", true);
DisplayXMLhardcodingError(strcmp("MISSION_SKIP", GC.getMissionInfo(MISSION_SKIP).getType()) == 0, "MISSION_SKIP", true);
DisplayXMLhardcodingError(strcmp("MISSION_SLEEP", GC.getMissionInfo(MISSION_SLEEP).getType()) == 0, "MISSION_SLEEP", true);
DisplayXMLhardcodingError(strcmp("MISSION_FORTIFY", GC.getMissionInfo(MISSION_FORTIFY).getType()) == 0, "MISSION_FORTIFY", true);
DisplayXMLhardcodingError(strcmp("MISSION_HEAL", GC.getMissionInfo(MISSION_HEAL).getType()) == 0, "MISSION_HEAL", true);
DisplayXMLhardcodingError(strcmp("MISSION_SENTRY", GC.getMissionInfo(MISSION_SENTRY).getType()) == 0, "MISSION_SENTRY", true);
DisplayXMLhardcodingError(strcmp("MISSION_BOMBARD", GC.getMissionInfo(MISSION_BOMBARD).getType()) == 0, "MISSION_BOMBARD", true);
DisplayXMLhardcodingError(strcmp("MISSION_PILLAGE", GC.getMissionInfo(MISSION_PILLAGE).getType()) == 0, "MISSION_PILLAGE", true);
DisplayXMLhardcodingError(strcmp("MISSION_FOUND", GC.getMissionInfo(MISSION_FOUND).getType()) == 0, "MISSION_FOUND", true);
DisplayXMLhardcodingError(strcmp("MISSION_JOIN_CITY", GC.getMissionInfo(MISSION_JOIN_CITY).getType()) == 0, "MISSION_JOIN_CITY", true);
DisplayXMLhardcodingError(strcmp("MISSION_BUILD", GC.getMissionInfo(MISSION_BUILD).getType()) == 0, "MISSION_BUILD", true);
DisplayXMLhardcodingError(strcmp("MISSION_LEAD", GC.getMissionInfo(MISSION_LEAD).getType()) == 0, "MISSION_LEAD", true);
DisplayXMLhardcodingError(strcmp("MISSION_BEGIN_COMBAT", GC.getMissionInfo(MISSION_BEGIN_COMBAT).getType()) == 0, "MISSION_BEGIN_COMBAT", true);
DisplayXMLhardcodingError(strcmp("MISSION_END_COMBAT", GC.getMissionInfo(MISSION_END_COMBAT).getType()) == 0, "MISSION_END_COMBAT", true);
DisplayXMLhardcodingError(strcmp("MISSION_SURRENDER", GC.getMissionInfo(MISSION_SURRENDER).getType()) == 0, "MISSION_SURRENDER", true);
DisplayXMLhardcodingError(strcmp("MISSION_CAPTURED", GC.getMissionInfo(MISSION_CAPTURED).getType()) == 0, "MISSION_CAPTURED", true);
DisplayXMLhardcodingError(strcmp("MISSION_IDLE", GC.getMissionInfo(MISSION_IDLE).getType()) == 0, "MISSION_IDLE", true);
DisplayXMLhardcodingError(strcmp("MISSION_DIE", GC.getMissionInfo(MISSION_DIE).getType()) == 0, "MISSION_DIE", true);
DisplayXMLhardcodingError(strcmp("MISSION_DAMAGE", GC.getMissionInfo(MISSION_DAMAGE).getType()) == 0, "MISSION_DAMAGE", true);
DisplayXMLhardcodingError(strcmp("MISSION_MULTI_SELECT", GC.getMissionInfo(MISSION_MULTI_SELECT).getType()) == 0, "MISSION_MULTI_SELECT", true);
DisplayXMLhardcodingError(strcmp("MISSION_MULTI_DESELECT", GC.getMissionInfo(MISSION_MULTI_DESELECT).getType()) == 0, "MISSION_MULTI_DESELECT", true);
DisplayXMLhardcodingError(strcmp("MISSION_WHALING", GC.getMissionInfo(MISSION_WHALING).getType()) == 0, "MISSION_WHALING", true);
DisplayXMLhardcodingError(strcmp("MISSION_FISHING", GC.getMissionInfo(MISSION_FISHING).getType()) == 0, "MISSION_FISHING", true);
DisplayXMLhardcodingError(NUM_MISSION_TYPES == (MissionTypes)GC.getNumMissionInfos(), "NUM_MISSION_TYPES", true);
DisplayXMLhardcodingError(NUM_PROFESSION_TYPES == (ProfessionTypes)GC.getNumProfessionInfos(), "NUM_PROFESSION_TYPES", false);
DisplayXMLhardcodingError(NUM_PROMOTION_TYPES == (PromotionTypes)GC.getNumPromotionInfos(), "NUM_PROMOTION_TYPES", false);
DisplayXMLhardcodingError(NUM_SPECIALUNIT_TYPES == (SpecialUnitTypes)GC.getNumSpecialUnitInfos(), "NUM_SPECIALUNIT_TYPES", false);
DisplayXMLhardcodingError(NUM_UNITCLASS_TYPES == (UnitClassTypes)GC.getNumUnitClassInfos(), "NUM_UNITCLASS_TYPES", false);
DisplayXMLhardcodingError(NUM_UNIT_TYPES == (UnitTypes)GC.getNumUnitInfos(), "NUM_UNIT_TYPES", false);
